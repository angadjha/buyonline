package com.lmig.grs.claims.medicard.config.wcclaims;

import com.lmig.grs.claims.medicard.config.wcclaims.interceptor.RequestInterceptor;
import org.apache.hc.client5.http.auth.AuthScope;
import org.apache.hc.client5.http.auth.Credentials;
import org.apache.hc.client5.http.auth.CredentialsProvider;
import org.apache.hc.client5.http.auth.UsernamePasswordCredentials;
import org.apache.hc.client5.http.impl.auth.BasicCredentialsProvider;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
import org.apache.hc.client5.http.config.RequestConfig;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.util.List;

@Configuration
@ComponentScan(basePackages = {"com.lmig.grs.claims.medicard"})
public class WCClaimsServiceConfig {

    /**
     * Instantiate RestTemplate.
     *
     * @param requestFactory the request factory
     * @return the RestTemplate
     */
    @Bean(name = "WCClaimsServiceRestTemplate")
    public RestTemplate restTemplate(ClientHttpRequestFactory requestFactory) {
        RestTemplate template = new RestTemplate();
        template.setRequestFactory(requestFactory);
        template.setInterceptors(List.of(new RequestInterceptor()));
        return template;
    }

    /**
     * Instantiate RequestFactory.
     *
     * @param httpClient the HTTP client
     * @return the HttpComponentsClientHttpRequestFactory
     */
    @Bean
    public HttpComponentsClientHttpRequestFactory requestFactory(CloseableHttpClient httpClient) {
        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();
        factory.setHttpClient(httpClient);
        return factory;
    }

    /**
     * Instantiate CloseableHttpClient.
     *
     * @param requestConfig        the request config
     * @param connectionManager    the connection manager
     * @param credentialsProvider  the credentials provider
     * @return the CloseableHttpClient
     */
    @Bean
    public CloseableHttpClient httpClient(RequestConfig requestConfig,
                                          PoolingHttpClientConnectionManager connectionManager,
                                          CredentialsProvider credentialsProvider) {
        return HttpClientBuilder.create()
                .setConnectionManager(connectionManager)
                .setDefaultRequestConfig(requestConfig)
                .setDefaultCredentialsProvider(credentialsProvider)
                .build();
    }

    /**
     * Instantiate PoolingHttpClientConnectionManager.
     *
     * @return the PoolingHttpClientConnectionManager
     */
    @Bean
    public PoolingHttpClientConnectionManager connectionManager() {
        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();
        connectionManager.setMaxTotal(10);
        return connectionManager;
    }

    /**
     * Instantiate RequestConfig.
     *
     * @return the RequestConfig
     */
    @Bean
    public RequestConfig requestConfig() {
        return RequestConfig.custom()
                .setConnectionRequestTimeout(10000)
                .setSocketTimeout(10000)
                .build();
    }

    /**
     * Instantiate CredentialsProvider.
     *
     * @param wcClaimsServiceProperties WCClaimsServiceProperties
     * @return the CredentialsProvider
     */
    @Bean(name = "WCServiceCredentialsProvider")
    public CredentialsProvider credentialsProvider(WCClaimsServiceProperties wcClaimsServiceProperties) {
        BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();
        Credentials credentials = new UsernamePasswordCredentials(
                wcClaimsServiceProperties.getUsername(),
                wcClaimsServiceProperties.getPassword()
        );
        credentialsProvider.setCredentials(AuthScope.ANY, credentials);
        return credentialsProvider;
    }
}

