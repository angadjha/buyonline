<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>5.2.0</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.8.2</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.2</version>
    <scope>test</scope>
</dependency>


======================================================

package com.lmig.grs.claims.medicard.business.validation;

import com.lmig.grs.claims.medicard.business.vo.validator.ValidationResult;
import com.lmig.grs.claims.medicard.business.vo.wcclaims.ClaimDetail;
import com.lmig.grs.claims.medicard.config.validation.MedicardProperties;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class MedicardValidatorTest {

    @InjectMocks
    private MedicardValidator medicardValidator;

    @Mock
    private MedicardProperties medicardProperties;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testValidateInvalidJurisdiction() {
        ClaimDetail claimDetail = mock(ClaimDetail.class);
        when(claimDetail.getClaim().getJurisdictionCode()).thenReturn("INVALID_CODE");

        when(medicardProperties.getJurisdictionCodes()).thenReturn(Set.of("VALID_CODE"));

        ValidationResult result = medicardValidator.validate(claimDetail, "CONTRACT_NO");

        assertFalse(result.isValid());
        assertTrue(result.getReason().contains("INVALID_JURISDICTION"));
    }

    @Test
    void testValidateInitialTreatmentCode() {
        ClaimDetail claimDetail = mock(ClaimDetail.class);
        when(claimDetail.getInjuryIllnessLoss().getInitialMedicalTreatmentCode()).thenReturn("INVALID_CODE");

        when(medicardProperties.getInitialTreatmentCodes()).thenReturn(Set.of("VALID_CODE"));

        ValidationResult result = medicardValidator.validate(claimDetail, "CONTRACT_NO");

        assertFalse(result.isValid());
        assertTrue(result.getReason().contains("INVALID_TRMNT_CD"));
    }

    @Test
    void testValidateFatalIndicator() {
        ClaimDetail claimDetail = mock(ClaimDetail.class);
        when(claimDetail.getInjuryIllnessLoss().getFatalityIndicator()).thenReturn("Y");

        ValidationResult result = medicardValidator.validate(claimDetail, "CONTRACT_NO");

        assertFalse(result.isValid());
        assertTrue(result.getReason().contains("FATALITY_YES"));
    }

    @Test
    void testValidateClaimOffice() {
        ClaimDetail claimDetail = mock(ClaimDetail.class);
        when(claimDetail.getClaim().getClaimNumber()).thenReturn("12345");

        when(medicardProperties.getClaimNumbers()).thenReturn("123");

        ValidationResult result = medicardValidator.validate(claimDetail, "CONTRACT_NO");

        assertFalse(result.isValid());
        assertTrue(result.getReason().contains("INVALID_OFFICE"));
    }

    @Test
    void testValidateInjuryDate() {
        ClaimDetail claimDetail = mock(ClaimDetail.class);
        LocalDate injuryDate = LocalDate.now().minusDays(61);
        when(claimDetail.getAccident().getInjuryDate()).thenReturn(injuryDate);

        ValidationResult result = medicardValidator.validate(claimDetail, "CONTRACT_NO");

        assertFalse(result.isValid());
        assertTrue(result.getReason().contains("INJURY_DATE_GT_60"));
    }

    @Test
    void testValidateReportedByTitle() {
        ClaimDetail claimDetail = mock(ClaimDetail.class);
        when(claimDetail.getReportedBySource().getTitleCode()).thenReturn("01");

        when(medicardProperties.getClaimReportedCode()).thenReturn("01");

        ValidationResult result = medicardValidator.validate(claimDetail, "CONTRACT_NO");

        assertFalse(result.isValid());
        assertTrue(result.getReason().contains("REPORT_BY_CLAIMANT"));
    }

    @Test
    void testValidateInjuryCodes() {
        ClaimDetail claimDetail = mock(ClaimDetail.class);
        when(claimDetail.getInjuryIllnessLoss().getPrimaryPartOfBodyCode()).thenReturn("BODY_PART");
        when(claimDetail.getInjuryIllnessLoss().getPrimaryNatureOfInjuryCode()).thenReturn("INJURY_CODE");
        when(claimDetail.getInjuryIllnessLoss().getSecondaryPartOfBodyCode()).thenReturn("SECONDARY_PART");
        when(claimDetail.getInjuryIllnessLoss().getSecondaryNatureOfInjuryCode()).thenReturn("SECONDARY_INJURY_CODE");

        when(medicardProperties.getInjuryCodeList()).thenReturn(Set.of("BODY_PARTINJURY_CODE", "SECONDARY_PARTSECONDARY_INJURY_CODE"));

        ValidationResult result = medicardValidator.validate(claimDetail, "CONTRACT_NO");

        assertFalse(result.isValid());
        assertTrue(result.getReason().contains("INVALID_INJR_CD_1"));
        assertTrue(result.getReason().contains("INVALID_INJR_CD_2"));
    }
}

